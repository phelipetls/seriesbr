* Instituto Brasileiro de Geografia e Estatística

IBGE's database is very complex and allows you to get data for specific
locations, classifications, categories and periods.

The database has several "aggregated variables" and its different measures
are called "variables".

For example, IPCA is an aggregate and has as variables the monthly and cumulative
variation, among others.

In this demonstration, we will try to replicate the visualizations of IPCA in 
october 2019 for various kinds of products, as it was done [[https://sidra.ibge.gov.br/home/ipca][here]].

** Searching for aggregates

To stay consistent with the other modules, you can search for aggregates with the =search= function.
It takes an arbitrary number of regexes.

#+BEGIN_SRC python :session
import pandas as pd
from seriesbr import ibge

pd.set_option('max_colwidth', 200)

ibge.search("Variação mensal, acumulada no ano, acumulada em 12 meses")
#+END_SRC

#+RESULTS:
:         id                                                                                                                                                                                           nome
: 2231  1100      INPC - Variação mensal, acumulada no ano, acumulada em 12 meses e peso mensal, para o índice geral, grupos, subgrupos, itens e subitens de produtos e serviços (a partir de janeiro/2012)
: 2244  1419      IPCA - Variação mensal, acumulada no ano, acumulada em 12 meses e peso mensal, para o índice geral, grupos, subgrupos, itens e subitens de produtos e serviços (a partir de janeiro/2012)
: 2260  1705  IPCA15 - Variação mensal, acumulada no ano, acumulada em 12 meses e peso mensal, para o índice geral, grupos, subgrupos, itens e subitens de produtos e serviços (a partir de fevereiro/2012)

** Searching for variables

#+BEGIN_SRC python :session
ibge.list_variables(1419)
#+END_SRC

#+RESULTS:
:      id                               variavel unidade
: 0    63                 IPCA - Variação mensal       %
: 1    69       IPCA - Variação acumulada no ano       %
: 2  2265  IPCA - Variação acumulada em 12 meses       %
: 3    66                     IPCA - Peso mensal       %

** Searching for classifications and categories

You can search for classifications and categories with the function =list_classifications=.

All =list_*= functions takes an arbitrary number of strings (a regular expression)
as optional arguments to match the column "nome" by default, i.e.,
the name of the categories, but you can change this with the argument =where=.

So to search for the ones used in the IBGE's site we could do:

#+BEGIN_SRC python :session
categories = ibge.list_classifications(
    1419,
    "Índice geral",
    "^..Alimentação e bebidas",
    "^..Habitação",
    "^..Artigos de residência",
    "^..Vestuário",
    "^..Transportes",
    "^..Saúde e cuidados pessoais",
    "^..Despesas Pessoais",
    "^..Educação",
    "^..Comunicação",
)

categories
#+END_SRC

#+RESULTS:
#+begin_example
       id                         nome unidade  nivel  classificacao_id                      classificacao_nome
0    7169                 Índice geral    None     -1               315  Geral, grupo, subgrupo, item e subitem
1    7170      1.Alimentação e bebidas    None     -1               315  Geral, grupo, subgrupo, item e subitem
191  7445                  2.Habitação    None     -1               315  Geral, grupo, subgrupo, item e subitem
227  7486      3.Artigos de residência    None     -1               315  Geral, grupo, subgrupo, item e subitem
270  7558                  4.Vestuário    None     -1               315  Geral, grupo, subgrupo, item e subitem
315  7625                5.Transportes    None     -1               315  Geral, grupo, subgrupo, item e subitem
348  7660  6.Saúde e cuidados pessoais    None     -1               315  Geral, grupo, subgrupo, item e subitem
395  7712          7.Despesas pessoais    None     -1               315  Geral, grupo, subgrupo, item e subitem
428  7766                   8.Educação    None     -1               315  Geral, grupo, subgrupo, item e subitem
453  7786                9.Comunicação    None     -1               315  Geral, grupo, subgrupo, item e subitem
#+end_example

** Retrieving data

When filtering by classifications, you can pass a dictionary whose keys
are a classification id and values the categories' id.

Alternatively, you can just pass an int/str or a list of classifications,
in which case all categories of the given classifications will be returned.

#+BEGIN_SRC python :session
ipca = ibge.get_series(1419, start="10-2019", end="10-2019", classifications={315: categories.id.to_list()})

ipca
#+END_SRC

#+RESULTS:
#+begin_example
           Nível Territorial  Brasil           Mês                Variável Geral, grupo, subgrupo, item e subitem Unidade de Medida    Valor
Data                                                                                                                                        
2019-10-01            Brasil  Brasil  outubro 2019  IPCA - Variação mensal                           Índice geral                 %   0.1000
2019-10-01            Brasil  Brasil  outubro 2019  IPCA - Variação mensal                1.Alimentação e bebidas                 %   0.0500
2019-10-01            Brasil  Brasil  outubro 2019  IPCA - Variação mensal                            2.Habitação                 %  -0.6100
2019-10-01            Brasil  Brasil  outubro 2019  IPCA - Variação mensal                3.Artigos de residência                 %  -0.0900
2019-10-01            Brasil  Brasil  outubro 2019  IPCA - Variação mensal                            4.Vestuário                 %   0.6300
...                      ...     ...           ...                     ...                                    ...               ...      ...
2019-10-01            Brasil  Brasil  outubro 2019      IPCA - Peso mensal                          5.Transportes                 %  18.1478
2019-10-01            Brasil  Brasil  outubro 2019      IPCA - Peso mensal            6.Saúde e cuidados pessoais                 %  12.2823
2019-10-01            Brasil  Brasil  outubro 2019      IPCA - Peso mensal                    7.Despesas pessoais                 %  10.8677
2019-10-01            Brasil  Brasil  outubro 2019      IPCA - Peso mensal                             8.Educação                 %   5.0180
2019-10-01            Brasil  Brasil  outubro 2019      IPCA - Peso mensal                          9.Comunicação                 %   3.4434

[40 rows x 7 columns]
#+end_example

** Inflation rate by products/services

#+NAME: 
#+BEGIN_SRC python :session

ipca.pivot_table(index="Geral, grupo, subgrupo, item e subitem", columns="Variável", values="Valor")

#+END_SRC

#+RESULTS:
#+begin_example
Variável                                IPCA - Peso mensal  ...  IPCA - Variação mensal
Geral, grupo, subgrupo, item e subitem                      ...                        
1.Alimentação e bebidas                            24.5278  ...                    0.05
2.Habitação                                        16.1701  ...                   -0.61
3.Artigos de residência                             3.9050  ...                   -0.09
4.Vestuário                                         5.6379  ...                    0.63
5.Transportes                                      18.1478  ...                    0.45
6.Saúde e cuidados pessoais                        12.2823  ...                    0.40
7.Despesas pessoais                                10.8677  ...                    0.20
8.Educação                                          5.0180  ...                    0.03
9.Comunicação                                       3.4434  ...                   -0.01
Índice geral                                      100.0000  ...                    0.10

[10 rows x 4 columns]
#+end_example

Now let's visualize this.

#+BEGIN_SRC python :session :results file
import matplotlib
import matplotlib.pyplot as plt

matplotlib.style.use('seaborn-deep')

ipca.pivot_table(
    index="Geral, grupo, subgrupo, item e subitem", columns="Variável", values="Valor"
).drop("IPCA - Peso mensal", axis="columns").plot(kind="barh", figsize=(10, 6)).legend(
    loc="upper center", ncol=3, bbox_to_anchor=(0.5, 1.08)
)

plt.tight_layout()
plt.savefig('imgs/ipca.png', bbox_inches="tight")

'imgs/ipca.png'
#+END_SRC

[[imgs/ipca.png]]

** Weight of each product in the inflation rate

#+BEGIN_SRC python :session :results file
ipca.pivot_table(
    index="Geral, grupo, subgrupo, item e subitem", columns="Variável", values="Valor"
).loc[:, ["IPCA - Peso mensal"]].sort_values("IPCA - Peso mensal").plot(kind="barh")

plt.tight_layout()
plt.savefig('imgs/peso_mensal.png')

'imgs/peso_mensal.png'
#+END_SRC

[[imgs/peso_mensal.png]]

** Inflation rate by metropolitan areas

Now we want to plot the inflation rate by metropolitan area, which is a mesoregion.
It turned out that we can just call =get_series= and assign the keyword argument
=mesoregion= to "all", and we will get data for all of the available metropolitan areas
of Brazil.

If you want something other than mesoregion, there are also macroregions (Sul, Sudeste),
microregions (Baixadas, Norte Fluminense etc. in Rio de Janeiro), cities and states. If
there is available data for these location in the aggregate, you can assign "all" and it
will do the same thing, or you can pass a list of codes or a single code and it will filter
just for these.

By default, it will get data for the whole country. If you want data for other regions and also
for Brazil as a whole, you can do the following:

#+BEGIN_SRC python :session

ipca_by_area = ibge.get_series(1419, mesoregion="all", brazil="yes", start="10-2019", end="10-2019")

ipca_by_area

#+END_SRC

#+RESULTS:
#+begin_example
               Nível Territorial Região Metropolitana e Brasil           Mês  ... Geral, grupo, subgrupo, item e subitem Unidade de Medida   Valor
Data                                                                          ...                                                                 
2019-10-01  Região Metropolitana                    Belém - PA  outubro 2019  ...                           Índice geral                 %    0.22
2019-10-01  Região Metropolitana                    Belém - PA  outubro 2019  ...                           Índice geral                 %    2.71
2019-10-01  Região Metropolitana                    Belém - PA  outubro 2019  ...                           Índice geral                 %    3.21
2019-10-01  Região Metropolitana                    Belém - PA  outubro 2019  ...                           Índice geral                 %  100.00
2019-10-01  Região Metropolitana                Fortaleza - CE  outubro 2019  ...                           Índice geral                 %    0.04
...                          ...                           ...           ...  ...                                    ...               ...     ...
2019-10-01  Região Metropolitana             Porto Alegre - RS  outubro 2019  ...                           Índice geral                 %  100.00
2019-10-01                Brasil                        Brasil  outubro 2019  ...                           Índice geral                 %    0.10
2019-10-01                Brasil                        Brasil  outubro 2019  ...                           Índice geral                 %    2.60
2019-10-01                Brasil                        Brasil  outubro 2019  ...                           Índice geral                 %    2.54
2019-10-01                Brasil                        Brasil  outubro 2019  ...                           Índice geral                 %  100.00

[44 rows x 7 columns]
#+end_example

But really, you could pass for the =brazil= keyword any value that would be evaluated
as =True= in Python.

#+BEGIN_SRC python :session :results file

ipca_by_area.pivot_table(
    index="Região Metropolitana", columns="Variável", values="Valor"
).drop("IPCA - Peso mensal", axis="columns").plot.barh(figsize=(8, 7)).legend(
    loc="upper center", ncol=3, bbox_to_anchor=(0.5, 1.08)
)

plt.tight_layout()
plt.savefig('imgs/ipca_by_area.png', bbox_inches="tight")
'imgs/ipca_by_area.png'

#+END_SRC

[[imgs/ipca_by_area.png]]

** Inflation rate by category and month

#+BEGIN_SRC python :session
ipca_by_month = ibge.get_series(1419, classifications={315: categories.id.to_list()})

ipca_by_month.pivot_table(index="Geral, grupo, subgrupo, item e subitem", columns="Mês", values="Valor")
#+END_SRC

#+RESULTS:
#+begin_example
Mês                                     abril 2012  abril 2013  abril 2014  abril 2015  ...  setembro 2016  setembro 2017  setembro 2018  setembro 2019
Geral, grupo, subgrupo, item e subitem                                                  ...                                                            
1.Alimentação e bebidas                   8.490033   11.303950    9.499550    9.572500  ...      11.987300       5.112700       7.454000       7.464050
2.Habitação                               5.967500    4.004100    6.340575   10.862250  ...       5.845750       5.888425       7.419700       6.187400
3.Artigos de residência                   0.946733    2.956325    3.424775    2.886500  ...       3.317275       0.560075       1.752125       1.530825
4.Vestuário                               2.572533    3.616250    2.984950    2.725525  ...       3.541950       2.395050       1.638375       1.612725
5.Transportes                             7.041667    5.417575    6.098075    7.571900  ...       6.533150       6.142875       7.870325       5.065100
6.Saúde e cuidados pessoais               4.810233    5.497675    5.374700    5.650850  ...       8.184750       6.075775       5.475700       5.328975
7.Despesas pessoais                       5.564033    5.824075    5.800000    5.698500  ...       6.356575       4.848525       4.134700       4.079425
8.Educação                                3.761700    4.706800    5.142775    5.164850  ...       5.708350       4.691650       3.868000       3.555975
9.Comunicação                             1.828867    1.148275    0.982125    0.602150  ...       1.897400       1.784925       0.962075       1.063050
Índice geral                             34.170000   27.385000   27.452500   28.360000  ...      28.517500      26.120000      27.087500      26.335000

[10 rows x 95 columns]
#+end_example

#+BEGIN_SRC python :session :results file
ibge.get_series(
    1419, classifications={315: categories.id.to_list()}, last_n=1
).pivot_table(
    index="Geral, grupo, subgrupo, item e subitem", columns="Variável", values="Valor"
).drop("IPCA - Peso mensal", axis="columns").plot.barh(figsize=(8, 7)).legend(
    loc="upper center", ncol=3, bbox_to_anchor=(0.5, 1.08)
)

plt.savefig('imgs/recent_ipca.png', bbox_inches='tight')
'imgs/recent_ipca.png'
#+END_SRC

[[imgs/recent_ipca.png]]

