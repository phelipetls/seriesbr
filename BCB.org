* Banco Central do Brasil
** Searching
*** Searching for brazilian interest rate

#+BEGIN_SRC python :session :exports both
  import pandas as pd
  pd.set_option('display.max_rows', 10)
#+END_SRC

#+RESULTS:


#+BEGIN_SRC python :session :results value :exports both
  from seriesbr import bcb

  bcb.search("Selic")
#+END_SRC

#+RESULTS:
#+begin_example
  codigo_sgs  ...                            unidade_medida
0       1178  ...                         Percentual ao ano
1       4390  ...                         Percentual ao mês
2       4189  ...                         Percentual ao ano
3       4177  ...                                Percentual
4      10634  ...  Milhões de unidades monetárias correntes
5             ...                                          
6             ...                                          
7      10613  ...                                     Meses
8      10614  ...                                     Meses
9      10618  ...                                     Meses

[10 rows x 4 columns]
#+end_example

*** Searching multiple terms

#+BEGIN_SRC python :session :exports both
  bcb.search("Atividade", "Econômica", "Índice")
#+END_SRC

#+RESULTS:
#+begin_example
  codigo_sgs  ...              unidade_medida
0      24364  ...                      Índice
1       7414  ...                      Índice
2      11426  ...  Variação percentual mensal
3      11427  ...  Variação percentual mensal
4      10841  ...  Variação percentual mensal
5      10842  ...  Variação percentual mensal
6      11428  ...  Variação percentual mensal
7      10843  ...  Variação percentual mensal
8      10844  ...  Variação percentual mensal
9      16122  ...  Variação percentual mensal

[10 rows x 4 columns]
#+end_example

By default, it only returns the first 10 results. If you didn't find what you're looking for,
you can specify the number of returned results with =rows= and how many results to skip with =skip=.

*** Controlling the number of search results

The argument =rows= limits the search results (defaults to 10) while =skip= controls where to start showing.

#+BEGIN_SRC python :session :exports both
  bcb.search("Monetária", rows=20, skip=1)
#+END_SRC

#+RESULTS:
#+begin_example
   codigo_sgs  ...                                   unidade_medida
0       17633  ...        Milhares de unidades monetárias correntes
1        1849  ...        Milhares de unidades monetárias correntes
2        1848  ...        Milhares de unidades monetárias correntes
3        1850  ...        Milhares de unidades monetárias correntes
4        1797  ...        Milhares de unidades monetárias correntes
..        ...  ...                                              ...
15      10813  ...  Taxa unidade monetária corrente/dólar americano
16          1  ...  Taxa unidade monetária corrente/dólar americano
17      12150  ...         Milhões de unidades monetárias correntes
18      12106  ...         Milhões de unidades monetárias correntes
19      17620  ...        Milhares de unidades monetárias correntes

[20 rows x 4 columns]
#+end_example

** Retrieving data
*** Getting a single series values

#+BEGIN_SRC python :session :exports both
  bcb.get_series({"Spread": 20786}) # or just 20786
#+END_SRC

#+RESULTS:
#+begin_example
            Spread
date              
2011-03-01   26.22
2011-04-01   27.01
2011-05-01   26.84
2011-06-01   26.72
2011-07-01   26.91
...            ...
2019-06-01   31.43
2019-07-01   31.63
2019-08-01   31.57
2019-09-01   30.84
2019-10-01   30.35

[104 rows x 1 columns]
#+end_example

*** Getting multiple series values and filtering by period

#+BEGIN_SRC python :session :exports both
  bcb.get_series({"Spread": 20786, "Selic": 4189, "PIB_Mensal": 4380}, start="2011", end="07-2012")
#+END_SRC

#+RESULTS:
#+begin_example
            Spread  Selic  PIB_Mensal
date                                 
2011-01-01     NaN  10.85    333330.5
2011-02-01     NaN  11.17    335117.5
2011-03-01   26.22  11.62    348082.9
2011-04-01   27.01  11.74    349255.0
2011-05-01   26.84  11.92    366411.2
...            ...    ...         ...
2012-03-01   27.42   9.82    393868.0
2012-04-01   26.84   9.35    382581.2
2012-05-01   25.20   8.87    401072.7
2012-06-01   24.42   8.39    399470.5
2012-07-01   24.17   8.07    415385.2

[19 rows x 3 columns]
#+end_example

Or, if you don't mind the column names:

#+BEGIN_SRC python :session :exports both
  bcb.get_series(20786, 4189, 4380)
#+END_SRC

#+RESULTS:
#+begin_example
            20786  4189      4380 
date                              
1986-06-01    NaN  18.23       NaN
1986-07-01    NaN  23.51       NaN
1986-08-01    NaN  35.55       NaN
1986-09-01    NaN  39.39       NaN
1986-10-01    NaN  23.65       NaN
...           ...    ...       ...
2019-08-01  31.57   5.90  603944.8
2019-09-01  30.84   5.71  566361.6
2019-10-01  30.35   5.38  613627.6
2019-11-01    NaN   4.90       NaN
2019-12-01    NaN   4.90       NaN

[403 rows x 3 columns]
#+end_example

*** Getting rid of NaN

#+BEGIN_SRC python :session :exports both
  bcb.get_series(20786, 4189, 4380, join="inner")
#+END_SRC

#+RESULTS:
#+begin_example
            20786  4189      4380 
date                              
2011-03-01  26.22  11.62  348082.9
2011-04-01  27.01  11.74  349255.0
2011-05-01  26.84  11.92  366411.2
2011-06-01  26.72  12.10  371046.4
2011-07-01  26.91  12.25  373333.7
...           ...    ...       ...
2019-06-01  31.43   6.40  594163.0
2019-07-01  31.63   6.40  619395.2
2019-08-01  31.57   5.90  603944.8
2019-09-01  30.84   5.71  566361.6
2019-10-01  30.35   5.38  613627.6

[104 rows x 3 columns]
#+end_example

Another possibily is just calling =dropna()= afterwards.

** Getting metadata

#+BEGIN_SRC python :session :exports both
  metadados = bcb.get_metadata(11)

  metadados
#+END_SRC

#+RESULTS:
#+begin_example
                                                                                                                                                                         values
referencias                                                                                                                                                                    
license_title                                                                                                    Licença Aberta para Bases de Dados (ODbL) do Open Data Commons
maintainer                                                                                                  Banco Central do Brasil/Departamento de Operações do Mercado Aberto
relationships_as_object                                                                                                                                                      []
vcge                     Sistema financeiro [http://vocab.e.gov.br/2011/03/vcge#sistema-financeiro], Economia e Finanças [http://vocab.e.gov.br/2011/03/vcge#economia-financas]
...                                                                                                                                                                         ...
license_url                                                                                                                     http://www.opendefinition.org/licenses/odc-odbl
frequencia                                                                                                                                                                     
title                                                                                                                                                     Taxa de juros - Selic
revision_id                                                                                                                                67db17b5-70d3-4f23-af39-afa50ee1b451
fim_periodo                                                                                                                                                                    

[43 rows x 1 columns]
#+end_example

