* SeriesBR: A Python package to get brazilian economic time series
  :PROPERTIES:
  :CUSTOM_ID: seriesbr-a-python :session-package-to-get-brazilian-economic-time-series
  :header-args:python: :exports both
  :END:


** Introduction

This package eases the task of getting data from Banco Central do Brasil
(BCB) and Instituto de Pesquisa Econômica Aplicada (Ipea) databases API.

It comes packed with a bunch of functions to interact with them,
such as searching for a series, retrieving metadata and, most importantly,
getting the series values into a =pandas.DataFrame=.

It is heavily inspired by the R packages [[https://github.com/wilsonfreitas/rbcb][rbcb]] and [[https://github.com/ipea/ipeaData][ipeaData]].

** Installation

#+NAME: Installation

=pip3 install seriesbr=

#+END_NAME:

** Dependencies

- requests
- pandas

** Features

- Get multiple time series with =get_series=.
- Search in a given database with =search=.
- Get metadata with =get_metadata=.

** Banco Central do Brasil
   :PROPERTIES:
   :CUSTOM_ID: banco-central-do-brasil
   :END:

Let's imagine you need to get the brazilian interest rate. You
will need a code for that but you have no idea what it is.

Not a problem, you can search for it like this:

#+BEGIN_SRC python :session
  import pandas as pd
  pd.set_option('display.max_rows', 10)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :session
  from seriesbr import bcb

  bcb.search("Selic")
#+END_SRC

#+RESULTS:
#+begin_example
  codigo_sgs periodicidade     unidade_medida                                              title
0       1178        diária  Percentual ao ano          Taxa de juros - Selic anualizada base 252
1       4390        mensal  Percentual ao mês             Taxa de juros - Selic acumulada no mês
2       4189        mensal  Percentual ao ano  Taxa de juros - Selic acumulada no mês anualiz...
3       4177        mensal         Percentual  Dívida mobiliária - Participação por indexador...
4       4175        mensal         Percentual  Dívida mobiliária - Participação por indexador...
5       4173        mensal         Percentual  Dívida mobiliária - Participação por indexador...
6       4174        mensal         Percentual  Dívida mobiliária - Participação por indexador...
7       4178        mensal         Percentual  Dívida mobiliária - Participação por indexador...
8       4176        mensal         Percentual  Dívida mobiliária - Participação por indexador...
9       4180        mensal         Percentual  Dívida mobiliária - Participação por indexador...
#+end_example

The =bcb.search= function takes an arbitrary number of optional arguments.

The API then do its best to give the results accordingly.


#+BEGIN_SRC python :session
  bcb.search("Atividade", "Econômica", "Índice")
#+END_SRC

#+RESULTS:
#+begin_example
  codigo_sgs periodicidade              unidade_medida                                              title
0      24364        mensal                      Índice  Índice de Atividade Econômica do Banco Central...
1       7414        mensal                      Índice       Vendas do setor supermercadista (Jan/94=100)
2      11426        mensal  Variação percentual mensal  Índice nacional de preços ao consumidor - Ampl...
3      11427        mensal  Variação percentual mensal  Índice nacional de preços ao consumidor - Ampl...
4      10841        mensal  Variação percentual mensal  Índice de Preços ao Consumidor-Amplo (IPCA) - ...
5      10842        mensal  Variação percentual mensal  Índice de Preços ao Consumidor-Amplo (IPCA) - ...
6      11428        mensal  Variação percentual mensal  Índice nacional de preços ao consumidor - Ampl...
7      10843        mensal  Variação percentual mensal  Índice de Preços ao Consumidor-Amplo (IPCA) - ...
8      10844        mensal  Variação percentual mensal  Índice de Preços ao Consumidor-Amplo (IPCA) - ...
9      16122        mensal  Variação percentual mensal  Índice nacional de preços ao consumidor - Ampl...
#+end_example

By default, it only returns the first 10 results.
If you didn't find what you're looking for,
you can specify the number of returned results with =rows=
and how many results to skip =skip=.

#+BEGIN_SRC python :session
  bcb.search("Monetária", rows = 20, start = 1)
#+END_SRC

#+RESULTS:
#+begin_example
   codigo_sgs periodicidade                                   unidade_medida                                              title
0       17633        mensal        Milhares de unidades monetárias correntes  Recolhimentos obrigatórios de instituições fin...
1        1849        mensal        Milhares de unidades monetárias correntes  Recolhimentos obrigatórios de instituições fin...
2        1848        mensal        Milhares de unidades monetárias correntes  Recolhimentos obrigatórios de instituições fin...
3        1850        mensal        Milhares de unidades monetárias correntes  Recolhimentos obrigatórios de instituições fin...
4        1797        mensal        Milhares de unidades monetárias correntes  Recolhimentos obrigatórios de instituições fin...
..        ...           ...                                              ...                                                ...
15      10813        diária  Taxa unidade monetária corrente/dólar americano  Taxa de câmbio - Livre - Dólar americano (compra)
16          1        diária  Taxa unidade monetária corrente/dólar americano  Taxa de câmbio - Livre - Dólar americano (vend...
17      12150        mensal         Milhões de unidades monetárias correntes  Saldos das operações de crédito das instituiçõ...
18      12106        mensal         Milhões de unidades monetárias correntes  Saldos das operações de crédito das instituiçõ...
19      17620        mensal        Milhares de unidades monetárias correntes  Insuficiência de direcionamento de crédito - D...

[20 rows x 4 columns]
#+end_example

Ok, so now you know how to find out the desired code.
Let's get the actual values.

To get just one series, you would simply do:

#+BEGIN_SRC python :session
  bcb.get_series({"Spread": 20786}) # or simply 20786
#+END_SRC

#+RESULTS:
#+begin_example
            Spread
date              
2011-03-01   26.22
2011-04-01   27.01
2011-05-01   26.84
2011-06-01   26.72
2011-07-01   26.91
...            ...
2019-06-01   31.43
2019-07-01   31.63
2019-08-01   31.57
2019-09-01   30.84
2019-10-01   30.35

[104 rows x 1 columns]
#+end_example

But, in general, you will want to get multiple series.

The most convenient way to do that is to pass a dictionary
with keys being names and values being codes.

You can optionally specify the arguments =start= and =end=, that
corresponds to the initial and final date, or =last_n= to get
just the last n observations.

#+BEGIN_SRC python :session
  bcb.get_series({"Spread": 20786, "Selic": 4189, "PIB_Mensal": 4380}, start="2011", end="07-2012")
#+END_SRC

#+RESULTS:

If you don't mind the columns names, you can just feed it with the numbers.

#+BEGIN_SRC python :session
  bcb.get_series(20786, 4189, 4380)
#+END_SRC

#+RESULTS:
#+begin_example
            20786  4189      4380 
date                              
1986-06-01    NaN  18.23       NaN
1986-07-01    NaN  23.51       NaN
1986-08-01    NaN  35.55       NaN
1986-09-01    NaN  39.39       NaN
1986-10-01    NaN  23.65       NaN
...           ...    ...       ...
2019-07-01  31.63   6.40  619395.2
2019-08-01  31.57   5.90  603944.8
2019-09-01  30.84   5.71  566361.6
2019-10-01  30.35   5.38  613627.6
2019-11-01    NaN   4.90       NaN

[402 rows x 3 columns]
#+end_example

You can get rid of the NaN's with the argument =join=,
which is passed to the [[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html][=pandas.concat=]] function,
as well as any other keyword argument.

The default value for =join= is "outer". So, if you pass "inner":

#+BEGIN_SRC python :session
  bcb.get_series(20786, 4189, 4380, join="inner")
#+END_SRC

#+RESULTS:
#+begin_example
            20786  4189      4380 
date                              
2011-03-01  26.22  11.62  348082.9
2011-04-01  27.01  11.74  349255.0
2011-05-01  26.84  11.92  366411.2
2011-06-01  26.72  12.10  371046.4
2011-07-01  26.91  12.25  373333.7
...           ...    ...       ...
2019-06-01  31.43   6.40  594163.0
2019-07-01  31.63   6.40  619395.2
2019-08-01  31.57   5.90  603944.8
2019-09-01  30.84   5.71  566361.6
2019-10-01  30.35   5.38  613627.6

[104 rows x 3 columns]
#+end_example

Or, of course, you can call =dropna()= afterwards.

If you want more information about a given series, you can call =get_metadata=
and you will get a dictionary with the results.

#+BEGIN_SRC python :session
  metadados = bcb.get_metadata(11)

  metadados["notes"]
#+END_SRC

#+RESULTS:
: Taxa de juros que representa a taxa média ajustada das operações compromissadas com prazo de um dia útil lastreadas com títulos públicos federais custodiados no Sistema Especial de Liquidação e de Custódia (Selic). Divulgação em % a.d.
: 
: __Para mais informações sobre a série, clique no link abaixo:__
: 
: https://www3.bcb.gov.br/sgspub/consultarmetadados/consultarMetadadosSeries.do?method=consultarMetadadosSeriesInternet&hdOidSerieSelecionada=11

** Instituto de Pesquisa Econômica Aplicada
   :PROPERTIES:
   :CUSTOM_ID: instituto-de-pesquisa-econômica-aplicada
   :END:

Now let's check what we can do with the IPEA's database.

The =search= function here is more powerful because there are way more filters to play with.

For example, let's filter for a monthly macroeconomic time series with units in percent points.
Here, we have to specify which parameter we are referring to.

Under the hood, this functions asks the API to return any result
containing a given string in the specified field.

#+BEGIN_SRC python :session
from seriesbr import ipea

ipea.search(BASNOME="Macroeconômico", PERNOME="Mensal", UNINOME="(p.p.)")
#+END_SRC

#+RESULTS:
#+begin_example
             SERCODIGO                                            SERNOME PERNOME UNINOME         BASNOME
0         BM12_CRDSD12  Operações de crédito - recursos direcionados -...  Mensal  (p.p.)  Macroeconômico
1       BM12_CRDSDPF12  Operações de crédito - recursos direcionados -...  Mensal  (p.p.)  Macroeconômico
2       BM12_CRDSDPJ12  Operações de crédito - recursos direcionados -...  Mensal  (p.p.)  Macroeconômico
3         BM12_CRLSD12    Operações de crédito - recursos livres - spread  Mensal  (p.p.)  Macroeconômico
4       BM12_CRLSDPF12  Operações de crédito - recursos livres - sprea...  Mensal  (p.p.)  Macroeconômico
..                 ...                                                ...     ...     ...             ...
10  VALOR12_GLOBAL2412               Bônus global República (24) - spread  Mensal  (p.p.)  Macroeconômico
11  VALOR12_GLOBAL2712               Bônus global República (27) - spread  Mensal  (p.p.)  Macroeconômico
12  VALOR12_GLOBAL4012               Bônus global República (40) - spread  Mensal  (p.p.)  Macroeconômico
13   VALOR12_GLOBAL912                Bônus global República (9) - spread  Mensal  (p.p.)  Macroeconômico
14   VALOR12_TJCBOND12                                    C-Bond - spread  Mensal  (p.p.)  Macroeconômico

[15 rows x 5 columns]
#+end_example

Another example:

#+BEGIN_SRC python :session
  ipea.search("Juros", PERNOME="Mensal", UNINOME="(% a.m.)")
#+END_SRC

#+RESULTS:
#+begin_example
            SERCODIGO                                            SERNOME PERNOME   UNINOME
0   ANBIMA12_TJCDBP12                     Taxa de juros - CDB pré-fixado  Mensal  (% a.m.)
1       BM12_TJCDBN12                                Taxa de juros - CDB  Mensal  (% a.m.)
2        BM12_TJCDI12                         Taxa de juros - CDI / Over  Mensal  (% a.m.)
3       BM12_TJLCMN12       Taxa de juros - letras de câmbio ao mutuário  Mensal  (% a.m.)
4       BM12_TJLCTN12        Taxa de juros - letras de câmbio ao tomador  Mensal  (% a.m.)
..                ...                                                ...     ...       ...
12       GM12_TJLFT12  Taxa de juros - Letras do Tesouro Nacional - f...  Mensal  (% a.m.)
13   IBMEC12_OTNRTJ12  Taxa de juros - obrigações reajustáveis do Tes...  Mensal  (% a.m.)
14    IBMEC12_TJEMP12  Taxa de juros paga pelo tomador do empréstimo ...  Mensal  (% a.m.)
15     IBMEC12_TJLM12                Taxa de juros - letras imobiliárias  Mensal  (% a.m.)
16    IBMEC12_TJTIT12                   Taxa de juros - letras de câmbio  Mensal  (% a.m.)

[17 rows x 4 columns]
#+end_example

You could then get the series in the very same way:

#+BEGIN_SRC python :session
  ipea.get_series({"Taxa de juros - Over / Selic": "BM12_TJOVER12", "Taxa de juros - CDB": "BM12_TJCDBN12"}, join="inner")
#+END_SRC

#+RESULTS:
#+begin_example
            Taxa de juros - Over / Selic  Taxa de juros - CDB
date                                                         
1974-01-01                          1.46             1.800000
1974-02-01                          1.15             1.800000
1974-03-01                          1.16             1.800000
1974-04-01                          1.21             1.800000
1974-05-01                          1.24             1.800000
...                                  ...                  ...
2009-06-01                          0.76             0.711593
2009-07-01                          0.79             0.776809
2009-08-01                          0.69             0.692135
2009-09-01                          0.69             0.718573
2009-10-01                          0.69             0.693355

[430 rows x 2 columns]
#+end_example

To get metadata you would do the same as in =bcb= module.

#+BEGIN_SRC python :session :results output
  metadados = ipea.get_metadata("BM12_TJOVER12")

  metadados["SERCOMENTARIO"]
#+END_SRC

#+RESULTS:
: 
: 'Quadro: Taxas de juros efetivas.  Para 1974-1979: fonte Andima.  Dados mais recentes atualizados pela Sinopse da Andima.  Obs.: A taxa Overnight / Selic é a média dos juros que o Governo paga aos bancos que lhe emprestaram dinheiro. Refere-se à média do mês. Serve de referência para outras taxas de juros do país. A taxa Selic é a taxa básica de juros da economia.'

** Conclusion

For your convenience there is also a module to get
series from both databases in a single call.

You will always get a =pandas.DataFrame= when calling
=get_series= in every module.

You don't have to worry about converting dates because the index
is already of type =datetime64[ns]= sou you can immediately enjoy
pandas functionalities regarding dates, such as slicing and plotting.

#+BEGIN_SRC python :session
  from seriesbr import seriesbr

  dados = seriesbr.get_series(
      {
          "spread": 20786,
          "pib_mensal": 4380,
          "igp": "PAN12_IGPDIG12",
          "inadimplência": "BM12_CRLIN12"
      },
      join="inner",
  )
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :session :results file
  import matplotlib.pyplot as plt

  dados.plot(subplots=True, layout=(2, 2))
  plt.gcf().tight_layout()
  plt.suptitle("Séries do IPEADATA e do BCB")
  plt.subplots_adjust(top=.9)
  plt.savefig('example.png', figsize=(7, 7))
  'example.png'
#+END_SRC

#+RESULTS:
: Text(0.5, 0.98, 'Séries do IPEADATA e do BCB')

Hope you enjoy the package!!

If you find any bugs or if you think something could be better, 
feel free to open an issue / contribute by opening a pull request!

** LICENSE

[[https://github.com/phelipetls/seriesbr/blob/master/LICENSE][The Unlicense]]
